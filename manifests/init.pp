# == Class: jenkins
#
# Configure Jenkins
#
# This class, and the associated defines, should provide relatively
# comprehensive coverage of the Jenkins features.
#
# See http://jenkins-ci.org/ for more information.
#
# The local Java Keystore password is randomly generated.
#
# Use the command 'simp passgen -u jenkins' on the puppet server, as root to
# show the autogenerated password for the keystore.
#
# If you ever need to generate a new password, simply run 'simp passgen -r
# jenkins' and the next puppet run will generate a new password.
#
# By default Jenkins is started on port 8080 and under the 'jenkins' namespace.
# This means that your access URI will be something like
# http://your.server.fqdn:8080/jenkins/. Don't forget the trailing slash!
#
# To enable Jenkins inside of apache, set jenkins::setup_apache to true in hiera.
#
# == Notes
#
# In order to setup a stock jenkins instance, set the following in hiera:
#   jenkins::setup_apache: true
#   jenkins::setup_conf: true
#
# == Parameters
#
# [*rsync_plugins*]
# [*setup_apache*]
# [*jenkins_port*]
#   The port upon which Apache will listen for connections.
#   Set this to '443' to just run behind the native SSL implementation.
#
# [*jenkins_proxy_port*]
#   The port upon which Jenkins will listen for proxy connections from Apache.
#
# [*jenkins_tmpdir*]
#   The temporary directory at which jenkins should point.
#
# [*heap_size*]
#   The -Xmx setting for the JRE in megabytes
#
# [*perm_size*]
#   The Permanent Generation initial memory size, in megebytes.
#
# [*max_perm_size*]
#   The ceiling on the Permanent Generation memory size, in megabytes.
#
# [*jenkins_enable_access_log*]
#   Whether or not to enable the Jenkins access log.
#
# [*jenkins_handler_max*]
#   Maximum number of Jenkins worker threads to allow.
#
# [*jenkins_handler_idle*]
#   Maximum number of idle Jenkins worker threads to allow.
#
# [*trusted_nets*]
#   An array of networks, in Apache allow/deny compatible notation, that will
#   be allowed to talk to this server.
#
# [*jenkins_keystore*]
#   The Jenkins keystore location
#
# [*ssl_protocols*]
#   The allowed SSL protocols (Apache SSLProtocol)
#
# [*openssl_cipher_suite*]
#   The allowed SSL Ciphers
#
# [*sslverifyclient*]
# [*sslverifydepth*]
# [*app_pki_ca_dir*]
# [*app_pki_cert*]
# [*app_pki_key*]
#
# [*logfacility*]
#   It is assumed that you'll want to offload any Apache logs to your log
#   server since they are probably security relevant. However, if this is not
#   the case, simply change the facility here.)
#
# [*enable_external_yumrepo*]
#   Set this to true to point to the public yum repo for Jenkins.
#
# [*ldap*]
#   Whether or not to use LDAP as your authentication backend.
#
# [*ldap_uri*]
#   The URI of the LDAP server.
#
# [*ldap_base_dn*]
#   The Base DN of the LDAP search space.
#
# [*user_search_base*]
#   The path down which to search for users
#
# [*group_search_base*]
#   The path down which to search for groups. This doesn't really work with
#   PosixGroups right now but instead needs a GroupOfNames.
#
# [*ldap_bind_dn*]
#   The user to use to authenticate to the LDAP server.
#   Set to blank ('') to use anonymous binding.
#
# [*ldap_bind_pw*]
#   The password to use when binding to the LDAP server.
#
# [*default_ldap_admin*]
#   The default LDAP administrative user. You MUST specify this
#   or you'll have to hack config.xml later to get into your system.
#   This must be a valid LDAP user!
#
# [*allow_anonymous_read*]
#   Whether or not to allow anonymous users to read the main dashboard view.
#
# [*allow_signup*]
#   Allow users to sign up for Jenkins accounts. No effect with $ldap =
#   true
#
# [*firewall*]
#   Whether or not to include the SIMP iptables class and manage firewall rules.
#   false
#
# [*pki*]
#   Whether or not to include the SIMP pki class and manage certs.
#   false
#
# == Authors
#
# * Trevor Vaughan <tvaughan@onyxpoint.com>
#
class jenkins (
  $rsync_plugins             = true,
  $setup_apache              = false,
  $setup_conf                = false,
  $jenkins_port              = '8080',
  $jenkins_proxy_port        = '8081',
  $jenkins_tmpdir            = '/var/lib/jenkins/tmp',
  $heap_size                 = '1024',
  $perm_size                 = '32',
  $max_perm_size             = '256',
  $jenkins_enable_access_log = 'no',
  $jenkins_handler_max       = '100',
  $jenkins_handler_idle      = '20',
  $trusted_nets              = simplib::lookup('simp_options::trusted_nets', { 'default_value' => ['127.0.0.1', '::1'], 'value_type' => Array[String]}),
  $jenkins_keystore          = '/var/lib/jenkins/cacerts.jks',
  $ssl_protocols             = ['TLSv1','TLSv1.1','TLSv1.2'],
  $openssl_cipher_suite          = simplib::lookup('simp_options::openssl::cipher_suites', { 'default_value' => ['DEFAULT', '!MEDIUM'], 'value_type' => Array[String]}),
  $sslverifyclient           = 'optional',
  $sslverifydepth            = '10',
  $pki                       = simplib::lookup('simp_options::pki', { 'default_value' => false, 'value_type' => Boolean}),
  $app_pki_dir               = '/var/jenkins_pki',
  $app_pki_ca_dir            = '/var/jenkins_pki/pki/cacerts',
  $app_pki_cert              = "/var/jenkins_pki/pki/public/${::fqdn}.pub",
  $app_pki_key               = "/var/jenkins_pki/pki/private/${::fqdn}.pem",
  $logfacility               = 'local6',
  $enable_external_yumrepo   = false,
  $ldap                      = true,
  $ldap_uri                  = simplib::lookup('simp_options::ldap::uri', { 'default_value' => ["ldap://%{hiera('simp_options::puppet::server')}"], 'value_type' => Array[String]}),
  $ldap_base_dn              = simplib::lookup('simp_options::ldap::base_dn', { 'value_type' => String}),
  $user_search_base          = 'ou=People',
  $group_search_base         = 'ou=Group',
  $ldap_bind_dn              = simplib::lookup('simp_options::ldap::bind_dn', { 'default_value' => "cn=hostAuth,ou=Hosts,%{hiera('simp_options::ldap::base_dn')}", 'value_type' => String}),
  $ldap_bind_pw              = simplib::lookup('simp_options::ldap::bind_pw', { 'value_type' => String}),
  $default_ldap_admin        = '',
  $allow_anonymous_read      = true,
  $allow_signup              = false,
  $firewall                  = simplib::lookup('simp_options::firewall', { 'default_value' => false, 'value_type' => Boolean})
) {

  if $pki {
    include '::pki'

    file { $app_pki_dir:
      ensure => 'directory',
      owner  => 'root',
      group  => 'root',
      mode   => '0755'
    }
    ::pki::copy { $app_pki_dir:
      require => File[$app_pki_dir],
      notify  => Exec['build_jenkins_keystore']
    }
  }

  if $rsync_plugins {
    include 'jenkins::plugins'
  }

  $l_jenkins_pass = inline_template('<%= scope.function_passgen(["jenkins",24]) %>')

  $l_jenkins_keystore = '/var/lib/jenkins/cacerts.jks'

  exec { 'build_jenkins_keystore':
    command     => "/bin/rm ${l_jenkins_keystore}; \
                for file in ${app_pki_ca_dir}/*.pem; do \
                  /usr/bin/keytool -import -keystore ${l_jenkins_keystore} -trustcacerts -noprompt -alias `/bin/basename \$file` -file \$file -storepass ${l_jenkins_pass}; \
                done; \
                chmod 640 ${l_jenkins_keystore}; \
                chown root.jenkins ${l_jenkins_keystore}",
    refreshonly => true,
    require     => [
      Package['java-1.6.0-openjdk'],
      Package['jenkins']
    ],
    notify      => Service['jenkins']
  }

  file { '/var/lib/jenkins/cacerts.jks':
    ensure => 'file',
    owner  => 'root',
    group  => 'jenkins',
    mode   => '0640',
    notify => Exec['build_jenkins_keystore']
  }

  file { '/var/lib/jenkins/users':
    ensure  => 'directory',
    owner   => 'jenkins',
    group   => 'jenkins',
    mode    => '0640',
    require => Package['jenkins']
  }

  file { '/var/lib/jenkins/users/dont_panic':
    ensure => 'directory',
    owner  => 'jenkins',
    group  => 'jenkins',
    mode   => '0640'
  }

  file { '/var/lib/jenkins/users/dont_panic/config.xml':
    ensure  => 'file',
    owner   => 'jenkins',
    group   => 'jenkins',
    mode    => '0640',
    content => template('jenkins/dont_panic.xml.erb'),
    notify  => Service['jenkins']
  }

  file { '/var/log/jenkins/jenkins.log' :
    ensure => 'file',
    owner  => 'jenkins',
    group  => 'jenkins',
    mode   => '0640'
  }

  group { 'jenkins':
    ensure    => 'present',
    allowdupe => false,
    gid       => '419'
  }

  package { 'java-1.6.0-openjdk':
    ensure => 'latest'
  }

  package { 'jenkins':
    ensure  => 'latest',
    notify  => File['/var/lib/jenkins/plugins'],
    require => Package['java-1.6.0-openjdk']
  }

  user { 'jenkins':
    ensure     => 'present',
    allowdupe  => false,
    comment    => 'Jenkins',
    gid        => '419',
    uid        => '419',
    membership => 'inclusive',
    shell      => '/sbin/nologin',
    home       => '/var/lib/jenkins',
    before     => Package['jenkins']
  }

  service { 'jenkins':
    ensure     => 'running',
    enable     => true,
    hasrestart => true,
    hasstatus  => true,
    require    => [
      Package['jenkins'],
      Exec['build_jenkins_keystore']
    ]
  }

  $_jenkins_port = $jenkins_port ? {
    '443'   => template('jenkins/apache_native_ssl.erb'),
    default => template('jenkins/apache.erb')
  }
  if $setup_apache {
    simp_apache::add_site { 'jenkins':
      content => $_jenkins_port
    }
  }

  if $setup_conf {
    file { '/etc/sysconfig/jenkins':
      owner   => 'root',
      group   => 'root',
      mode    => '0644',
      content => template('jenkins/sysconfig.erb'),
      notify  => Service['jenkins'],
      require => Package['jenkins']
    }

    file { '/var/lib/jenkins':
      ensure => 'directory',
      owner  => 'jenkins',
      group  => 'jenkins',
      mode   => '0640'
    }

    # If this is not '/tmp'
    if ! ( $jenkins_tmpdir in [ '/tmp', '/var/tmp', '/usr/tmp', '/dev/shm' ] ) {
      file { $jenkins_tmpdir:
        ensure => 'directory',
        owner  => 'jenkins',
        group  => 'jenkins',
        mode   => '0640',
        notify => File['/var/lib/jenkins/config.xml']
      }
    }

    $_config_content = $ldap ? {
      true    => template('jenkins/ldap_config.xml.erb'),
      default => template('jenkins/config.xml.erb')
    }

    file { '/var/lib/jenkins/config.xml':
      ensure  => 'file',
      owner   => 'jenkins',
      group   => 'jenkins',
      mode    => '0640',
      replace => false,
      content => $_config_content,
      require => Package['jenkins'],
      notify  => Service['jenkins']
    }

    if $firewall {
      iptables::add_tcp_stateful_listen { 'allow_secure_jenkins':
        order        => '11',
        trusted_nets => $trusted_nets,
        dports       => $jenkins_port
      }
    }

    $_jenkins_enabled = $enable_external_yumrepo ? {
      true  => 1,
      false => 0
    }
    yumrepo { 'jenkins':
      baseurl         => 'http://pkg.jenkins-ci.org/redhat/',
      descr           => 'Jenkins Repository',
      enabled         => $_jenkins_enabled,
      gpgcheck        => 1,
      gpgkey          => 'http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key',
      keepalive       => 0,
      metadata_expire => '3600',
      require         => Package['jenkins']
    }
  }

  #validate_bool($rsync_plugins)
  #validate_bool($setup_apache)
  #validate_bool($setup_conf)
  validate_between($jenkins_port, '1', '65535')
  validate_between($jenkins_proxy_port, '1', '65535')
  validate_absolute_path($jenkins_tmpdir)
  #validate_integer($heap_size)
  #validate_integer($perm_size)
  #validate_integer($max_perm_size)
  #validate_array_member($jenkins_enable_access_log, ['yes', 'no'])
  #validate_integer($jenkins_handler_max)
  #validate_integer($jenkins_handler_idle)
  validate_net_list($trusted_nets)
  validate_absolute_path($jenkins_keystore)
  #validate_array_member($sslverifyclient, ['none','optional','require','optional_no_ca'])
  #validate_integer($sslverifydepth)
  #validate_array($ssl_protocols)
  #validate_array($openssl_cipher_suite)
  validate_absolute_path($app_pki_ca_dir)
  validate_absolute_path($app_pki_cert)
  validate_absolute_path($app_pki_key)
  #validate_bool($enable_external_yumrepo)
  #validate_bool($ldap)
  #validate_bool($allow_anonymous_read)
  #validate_bool($allow_signup)
}
